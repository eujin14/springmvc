package hello.core.beanfind;

import static org.junit.jupiter.api.Assertions.fail;

import java.util.Map;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

import hello.core.member.MemberRepository;

class ApplicationContextSameBeanFindTest {
	
	AnnotationConfigApplicationContext ac = new
			AnnotationConfigApplicationContext(SameBeanConfig.class);
	
	@Test
	@DisplayName("타입으로 조회시 같은 타입이 둘 이상 있으면, 중복 오류가 발생한다.")
	void findBeanTypeDuplicate() {
		//MemberRepository bean = ac.getBean(MemberRepository.class);
		assrtThrows(NoUniqusBeanDefinitionException.class,()-> ac.get.Bean(MemberRepository.class));
	}
	
	
	@Test 
	@DisplayName("타입으로 조회시 같은 타입이 둘 이상 있으며, 빈 이름을 지정하면 된다.")
	void findByName() {
		MemberRepository memberRepository = ac.getBean("memberRepository1",MemberRepository.class);
		assertThat(memberRepository),isInstanceOf(MemberRepository.class);
	}

	@Test
	void findAllBeanType() {
		Map<String,MemberRepository> beansOfType = ac.getBeansOfType(MemberRepository.class);
		for(String key : beansOfType.keySet()) {
			System.out.println("key = " + key + " value = " +
					beansOfType.get(key));
					 }
					 System.out.println("beansOfType = " + beansOfType);
					 assertThat(beansOfType.size()).isEqualTo(2);
					 

}
	 @Configuration
	 static class SameBeanConfig {
	 @Bean
	 public MemberRepository memberRepository1() {
	 return new MemoryMemberRepository();
	 }
	 @Bean
	 public MemberRepository memberRepository2() {
	 return new MemoryMemberRepository();
	 } }
	}
